{"version":3,"sources":["images/loading.gif","components/Header/index.js","components/Form/index.js","components/if/index.js","components/Results/index.js","components/History/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Form","props","useState","request","setRequest","useEffect","method","url","data","JSON","stringify","changeMethod","handleSubmit","e","a","preventDefault","handler","onSubmit","type","name","defaultValue","placeholder","onChange","target","value","onClick","parse","render","condition","children","If","React","Children","map","child","cloneElement","Then","Else","When","Results","loading","src","alt","results","headers","History","calls","Object","keys","key","apiCall","App","toggleLoading","setState","state","updateResults","updateRequest","fetchResults","axios","response","updateHistory","console","log","history","options","hash","md5","this","localStorage","setItem","getItem","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e1b6698.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.e4b6323e.gif\";","import React from 'react';\nimport './Header.scss';\n\nexport default function Header() {\n    return (\n        <header className=\"App-header\">\n            <h1>ReSTy</h1>\n        </header>\n    )\n}\n","import React, { useState, useEffect } from 'react';\n\nfunction Form(props) {\n\n  const [request, setRequest] = useState({});\n\n  useEffect(() => {\n    const method = props.request.method || 'get';\n    const url = props.request.url || '';\n    const data = props.request.data ? JSON.stringify(props.request.data) : '';\n    setRequest({ method, url, data });\n  }, [props, setRequest]);\n\n  const changeURL = (e) => {\n    let url = e.target.value;\n    setRequest({ ...request, url });\n  };\n\n  const changeMethod = (method) => {\n    setRequest({ ...request, method });\n  };\n\n  const changeBody = (e) => {\n    try {\n      let data = JSON.parse(e.target.value);\n      setRequest({ ...request, data });\n    } catch (e) { }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    props.handler(request);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <input\n          type=\"text\"\n          name=\"url\"\n          defaultValue={request.url}\n          placeholder=\"http://api.url.here\"\n          onChange={changeURL}\n        />\n        <button>GO!</button>\n      </div>\n      <div className=\"methods\">\n        <span className={`method ${request.method === 'get'}`} onClick={() => changeMethod('get')}>\n          GET\n        </span>\n        <span className={`method ${request.method === 'post'}`} onClick={() => changeMethod('post')}>\n          POST\n        </span>\n        <span className={`method ${request.method === 'put'}`} onClick={() => changeMethod('put')}>\n          PUT\n        </span>\n        <span className={`method ${request.method === 'delete'}`} onClick={() => changeMethod('delete')}>\n          DELETE\n        </span>\n\n        <textarea name=\"data\" onChange={changeBody} defaultValue={request.data} />\n\n      </div>\n    </form >\n  );\n}\n\nexport default Form;\n","import React from 'react';\n\nconst render = (condition = false, children = null) => {\n  return condition ? children : null;\n};\n\nexport const If = props =>\n  React.Children.map(props.children, child =>\n    React.cloneElement(child, { condition: props.condition })\n  );\n\nexport const Then = props => render(props.condition, props.children);\nexport const Else = props => render(!props.condition, props.children);\nexport const When = props => render(props.condition, props.children);\nexport const Unless = props => render(!props.condition, props.children);\n","import React from 'react';\n\nimport { If, Then, Else, When } from '../if';\nimport ReactJson from 'react-json-view';\n\nimport loading from '../../images/loading.gif';\n\nconst Results = (props) => {\n\n  return (\n    <section className=\"results\">\n      <If condition={props.loading}>\n        <Then>\n          <div className=\"loading\">\n            <img src={loading} alt=\"Loading\" />\n          </div>\n        </Then>\n        <Else>\n          <When condition={props.results}>\n            <h2>Headers</h2>\n            <ReactJson src={props.headers} />\n            <h2>Results</h2>\n            <ReactJson src={props.results} />\n          </When>\n        </Else>\n      </If>\n    </section>\n  );\n\n};\n\nexport default Results;\n","import React from 'react';\n\nfunction History(props) {\n\n  const calls = props.calls || {};\n\n  function loadRequest(apiCall) {\n    props.handler(apiCall);\n  }\n\n  return (\n    <aside className=\"history\">\n      <ul>\n        {\n          Object.keys(calls).map(key =>\n            <li key={key}>\n              <span className={`method ${props.calls[key].method}`}>{props.calls[key].method}</span>\n              <button className=\"url\" onClick={() => loadRequest(props.calls[key])}>{props.calls[key].url}</button>\n            </li>,\n          )\n        }\n      </ul>\n    </aside>\n  );\n}\n\nexport default History;\n","import React from 'react';\nimport md5 from 'md5';\nimport axios from 'axios';\n\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Results from './components/Results';\nimport History from './components/History';\n\nimport './styles.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {\n      loading: false,\n      request: {},\n      history: {},\n    };\n  }\n\n  toggleLoading = () => {\n    this.setState({ loading: !this.state.loading });\n  }\n\n  updateHistory(options) {\n    console.log('options', options)\n    let hash = md5(JSON.stringify(options));\n    console.log('hash', hash);\n    this.setState({ history: { ...this.state.history, [hash]: options } }, () => {\n      localStorage.setItem('history', JSON.stringify(this.state.history));\n    });\n  }\n\n  updateResults = (headers, results) => {\n    this.setState({ headers, results });\n  };\n\n  updateRequest = (request) => {\n    this.setState({ request });\n  }\n\n  fetchResults = async (request) => {\n\n    try {\n\n      this.toggleLoading();\n      this.updateRequest(request);\n\n      let response = await axios(request);\n\n      this.toggleLoading();\n      this.updateHistory(request);\n      this.updateResults(response.headers, response.data);\n\n    }\n    catch (e) {\n      console.log(e);\n    }\n  }\n\n  componentDidMount() {\n    let history = JSON.parse(localStorage.getItem('history'));\n    this.setState({ history });\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Form request={this.state.request} handler={this.fetchResults} />\n        <main>\n          <History handler={this.updateRequest} calls={this.state.history} />\n          <Results loading={this.state.loading} headers={this.state.headers} results={this.state.results} />\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}