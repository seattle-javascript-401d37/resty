{"version":3,"sources":["images/loading.gif","components/Header/index.js","components/Footer/index.js","components/Form/index_classy.js","components/Results/index.js","components/History/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Form","props","changeURL","e","url","target","value","newRequest","state","request","console","log","setState","changeMethod","method","changeBody","data","JSON","parse","handleSubmit","a","preventDefault","handler","stringify","md5","this","onSubmit","type","name","defaultValue","placeholder","onChange","onClick","React","Component","Results","loading","src","alt","headers","results","History","calls","Object","keys","map","key","apiCall","App","toggleLoading","updateResults","updateRequest","fetchResults","axios","response","updateHistory","history","hash","localStorage","setItem","getItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00b87495.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.e4b6323e.gif\";","import React from 'react';\nimport './Header.scss';\n\nexport default function Header() {\n    return (\n        <header className=\"App-header\">\n            <h1>ReSTy</h1>\n        </header>\n    )\n}\n","import React from 'react'\nimport './Footer.scss'\n\nexport default () => <footer className='Footer'>&copy; 2020 Full Stack Snacks</footer>\n","import React from 'react';\nimport md5 from 'md5';\n\nclass Form extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        const method = props.request.method || 'get';\n        const url = props.request.url || '';\n        const data = props.request.data ? JSON.stringify(props.request.data) : '';\n\n        this.state = {\n            request: {\n                method,\n                url,\n                data\n            }\n        };\n\n    }\n\n    componentDidUpdate(props) {\n\n        // we're doing something tricky in this component\n        // where state is tied to props at particular times\n        // i.e. at first render and when user clicks on call in history\n        // so we need this business to determine if anything has really changed\n        // otherwise we go into react render spiral\n\n        const nextHash = md5(JSON.stringify(props.request));\n        const stateHash = md5(JSON.stringify(this.state.request));\n\n        // console.log('props.request', props.request);\n        // console.log('state.request', this.state.request);\n\n        if (nextHash === stateHash) return;\n\n        // update state based on props if we've been cleared above\n        const request = { ...props.request };\n\n        console.log('componentDidUpdate', request);\n        this.setState({ request });\n    }\n\n    changeURL = (e) => {\n        let url = e.target.value;\n        const newRequest = { ...this.state.request, url };\n        console.log('changeURL', newRequest);\n        this.setState({ request: newRequest });\n    };\n\n    changeMethod = (method) => {\n        const newRequest = { ...this.state.request, method };\n\n        this.setState({ request: newRequest });\n    };\n\n    changeBody = (e) => {\n        try {\n            let data = JSON.parse(e.target.value);\n            const newRequest = { ...this.state.request, data };\n\n            this.setState({ request: newRequest });\n        } catch (e) { }\n    };\n\n    handleSubmit = async e => {\n        e.preventDefault();\n        this.props.handler(this.state.request);\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div>\n                    <input\n                        type=\"text\"\n                        name=\"url\"\n                        defaultValue={this.state.request.url}\n                        placeholder=\"http://api.url.here\"\n                        onChange={this.changeURL}\n                    />\n                    <button>GO!</button>\n                </div>\n                <div className=\"methods\">\n                    <span className={`method ${this.state.request.method === 'get'}`} onClick={() => this.changeMethod('get')}>\n                        GET\n        </span>\n                    <span className={`method ${this.state.request.method === 'post'}`} onClick={() => this.changeMethod('post')}>\n                        POST\n        </span>\n                    <span className={`method ${this.state.request.method === 'put'}`} onClick={() => this.changeMethod('put')}>\n                        PUT\n        </span>\n                    <span className={`method ${this.state.request.method === 'delete'}`} onClick={() => this.changeMethod('delete')}>\n                        DELETE\n        </span>\n\n                    <textarea name=\"data\" onChange={this.changeBody} defaultValue={this.state.request.data} />\n\n                </div>\n            </form >\n        );\n    }\n}\n\nexport default Form;\n","import React from 'react';\n\n// import { If, Then, Else, When } from '../if';\nimport ReactJson from 'react-json-view';\n\nimport loading from '../../images/loading.gif';\n\nconst Results = (props) => {\n\n  return (\n    <section className=\"results\">\n\n        {\n            props.loading ? (\n                <div className=\"loading\">\n                    <img src={loading} alt=\"Loading\" />\n                </div>\n            ) : (\n                <>\n                <h2>Headers</h2>\n                <ReactJson src={props.headers} />\n                <h2>Results</h2>\n                <ReactJson src={props.results} />\n                </>\n            )\n        }\n\n      {/* <If condition={props.loading}>\n        <Then>\n          <div className=\"loading\">\n            <img src={loading} alt=\"Loading\" />\n          </div>\n        </Then>\n        <Else>\n          <When condition={props.results}>\n            <h2>Headers</h2>\n            <ReactJson src={props.headers} />\n            <h2>Results</h2>\n            <ReactJson src={props.results} />\n          </When>\n        </Else>\n      </If> */}\n\n    </section>\n  );\n\n};\n\nexport default Results;\n","import React from 'react';\n\nfunction History(props) {\n\n  const calls = props.calls || {};\n\n  function loadRequest(apiCall) {\n    props.handler(apiCall);\n  }\n\n  return (\n    <aside className=\"history\">\n      <ul>\n        {\n          Object.keys(calls).map(key =>\n            <li key={key}>\n\n              <span className={`method ${props.calls[key].method}`}>{props.calls[key].method}</span>\n              <button className=\"url\" onClick={() => loadRequest(props.calls[key])}>{props.calls[key].url}</button>\n            </li>,\n          )\n        }\n      </ul>\n    </aside>\n  );\n}\n\nexport default History;\n","import React from 'react';\nimport md5 from 'md5';\nimport axios from 'axios';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Form from './components/Form/index_classy';\nimport Results from './components/Results';\nimport History from './components/History';\n\nimport './styles.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {\n      loading: false,\n      request: {},\n      history: {},\n    };\n  }\n\n  toggleLoading = () => {\n    this.setState({ loading: !this.state.loading });\n  }\n\n  updateHistory(request) {\n\n    let hash = md5(JSON.stringify(request));\n\n    const history = { ...this.state.history, [hash]: request }\n\n    this.setState({ history }, () => {\n      localStorage.setItem('history', JSON.stringify(this.state.history));\n    });\n  }\n\n  updateResults = (headers, results) => {\n    this.setState({ headers, results });\n  };\n\n  updateRequest = (request) => {\n    this.setState({ request });\n  }\n\n  fetchResults = async (request) => {\n\n    try {\n\n      this.toggleLoading();\n\n      this.updateRequest(request);\n\n      let response = await axios(request);\n\n      this.toggleLoading();\n\n\n      this.updateHistory(request);\n\n      this.updateResults(response.headers, response.data);\n\n    }\n    catch (e) {\n      console.log(e);\n    }\n  }\n\n  componentDidMount() {\n    let history = JSON.parse(localStorage.getItem('history'));\n    this.setState({ history });\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Form request={this.state.request} handler={this.fetchResults} />\n        <main>\n          <History handler={this.updateRequest} calls={this.state.history} />\n          <Results loading={this.state.loading} headers={this.state.headers} results={this.state.results} />\n        </main>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}