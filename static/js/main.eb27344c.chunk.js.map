{"version":3,"sources":["components/Header/index.js","components/Form/index.js","components/Footer/index.js","components/Results/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Form","props","handleChange","e","setState","target","name","value","handleSubmit","a","preventDefault","options","method","state","fetch","url","raw","json","data","headers","forEach","val","key","onSubmit","console","log","this","type","placeholder","onChange","React","Component","Results","count","src","results","App","submitHandler","fetchData","axios","get","response","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2VAGe,SAASA,IACpB,OACI,4BAAQC,UAAU,cACd,sC,YC+DGC,E,kDAjEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAR3B,EAWnBC,aAXmB,uCAWJ,WAAML,GAAN,qBAAAM,EAAA,6DACXN,EAAEO,iBADS,SAOHC,EAAU,CACVC,OAAQ,EAAKC,MAAMD,QARhB,SAWSE,MAAM,EAAKD,MAAME,IAAKJ,GAX/B,cAWHK,EAXG,gBAaUA,EAAIC,OAbd,OAaHC,EAbG,OAeHC,EAAU,GACdH,EAAIG,QAAQC,SAAQ,SAACC,EAAKC,GAAN,OAAcH,EAAQG,GAAOD,KAEjD,EAAKpB,MAAMsB,SAASJ,EAASD,GAlBtB,kDAuBPM,QAAQC,IAAR,MAvBO,0DAXI,sDAEf,EAAKZ,MAAQ,CACTE,IAAK,GACLH,OAAQ,OAJG,E,qDAwCf,OACI,0BAAMW,SAAUG,KAAKlB,cACjB,6BACI,2BAAOmB,KAAK,OAAOrB,KAAK,MAAMsB,YAAY,sBAAsBC,SAAUH,KAAKxB,eAC/E,wCAEJ,6BACI,+BACI,2BAAOyB,KAAK,QAAQrB,KAAK,SAASC,MAAM,MAAMsB,SAAUH,KAAKxB,eADjE,OAGA,+BACI,2BAAOyB,KAAK,QAAQrB,KAAK,SAASC,MAAM,OAAOsB,SAAUH,KAAKxB,eADlE,QAGA,+BACI,2BAAOyB,KAAK,QAAQrB,KAAK,SAASC,MAAM,MAAMsB,SAAUH,KAAKxB,eADjE,OAGA,+BACI,2BAAOyB,KAAK,QAAQrB,KAAK,SAASC,MAAM,SAASsB,SAAUH,KAAKxB,eADpE,gB,GA1DD4B,IAAMC,WCCV,G,MAAA,kBAAM,4BAAQhC,UAAU,UAAlB,iC,gBCUNiC,MAVf,SAAiB/B,GACb,OACI,oCACA,sCAAYA,EAAMgC,OAClB,kBAAC,IAAD,CAAWC,IAAKjC,EAAMkB,UACtB,kBAAC,IAAD,CAAWe,IAAKjC,EAAMkC,YCyCfC,E,kDAtCX,WAAYnC,GAAQ,IAAD,8BACf,cAAMA,IAiBVoC,cAAgB,SAACtB,EAAKH,GAClB,EAAK0B,aAjBL,EAAKzB,MAAQ,CACToB,MAAO,EACPd,QAAS,GACTgB,QAAS,IALE,E,wLAWQI,IAAMC,IAAI,iC,OAA3BC,E,OACNjB,QAAQC,IAAIgB,EAAStB,SACrBK,QAAQC,IAAIgB,EAASvB,MACrBQ,KAAKtB,SAAS,CAACe,QAASsB,EAAStB,QAASgB,QAASM,EAASvB,KAAKiB,QAASF,MAAOQ,EAASvB,KAAKe,Q,qIAS/F,OACI,yBAAKlC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMwB,SAAUG,KAAKW,gBACrB,kBAAC,EAAD,CACIlB,QAASO,KAAKb,MAAMM,QACpBgB,QAAST,KAAKb,MAAMsB,QACpBF,MAAOP,KAAKb,MAAMoB,QAEtB,kBAAC,EAAD,W,GAlCEF,aCGEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.eb27344c.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nexport default function Header() {\n    return (\n        <header className=\"App-header\">\n            <h1>ReSTy</h1>\n        </header>\n    )\n}\n","import React from 'react';\n\nclass Form extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: '',\n            method: 'get',\n        };\n    }\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    handleSubmit = async e => {\n        e.preventDefault();\n\n        try {\n\n            //   this.props.toggleLoading();\n\n            let options = {\n                method: this.state.method,\n            };\n\n            let raw = await fetch(this.state.url, options);\n\n            let data = await raw.json();\n\n            let headers = {};\n            raw.headers.forEach((val, key) => headers[key] = val);\n\n            this.props.onSubmit(headers, data);\n\n            //   this.props.toggleLoading();\n\n        } catch (e) {\n            console.log(e);\n        }\n\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div>\n                    <input type=\"text\" name=\"url\" placeholder=\"http://api.url.here\" onChange={this.handleChange} />\n                    <button>GO!</button>\n                </div>\n                <div>\n                    <label>\n                        <input type=\"radio\" name=\"method\" value=\"get\" onChange={this.handleChange} />GET\n          </label>\n                    <label>\n                        <input type=\"radio\" name=\"method\" value=\"post\" onChange={this.handleChange} />POST\n          </label>\n                    <label>\n                        <input type=\"radio\" name=\"method\" value=\"put\" onChange={this.handleChange} />PUT\n          </label>\n                    <label>\n                        <input type=\"radio\" name=\"method\" value=\"delete\" onChange={this.handleChange} />DELETE\n          </label>\n                </div>\n            </form >\n        );\n    }\n}\n\nexport default Form;\n","import React from 'react'\nimport './Footer.scss'\n\nexport default () => <footer className='Footer'>&copy; 2020 Full Stack Snacks</footer>\n","import React from 'react'\nimport ReactJson from 'react-json-view'\n\nfunction Results(props) {\n    return (\n        <>\n        <h2>Count: {props.count}</h2>\n        <ReactJson src={props.headers} />\n        <ReactJson src={props.results} />\n        </>\n    )\n}\n\nexport default Results\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Header from './components/Header/';\nimport Form from './components/Form/';\nimport Footer from './components/Footer/';\nimport Results from './components/Results';\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n            headers: {},\n            results: [],\n        }\n\n    }\n\n    async fetchData() {\n        const response = await axios.get('https://swapi.dev/api/people/');\n        console.log(response.headers);\n        console.log(response.data);\n        this.setState({headers: response.headers, results: response.data.results, count: response.data.count});\n\n    }\n\n    submitHandler = (url, method) => {\n        this.fetchData();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <Form onSubmit={this.submitHandler} />\n                <Results\n                    headers={this.state.headers}\n                    results={this.state.results}\n                    count={this.state.count}\n                />\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}